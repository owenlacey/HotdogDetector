// This file was auto-generated by ML.NET Model Builder. 
using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.ML;
using Microsoft.OpenApi.Models;
using System.Drawing;
using System.IO;
using System.Threading.Tasks;
using HotdotDetector_Api;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;

// Configure app
var builder = WebApplication.CreateBuilder(args);

builder.Services.AddPredictionEnginePool<MLModel.ModelInput, MLModel.ModelOutput>()
    .FromFile("MLModel.zip");

builder.Services.AddEndpointsApiExplorer();

builder.Services.AddCors();

builder.Services.AddSwaggerGen(c =>
{
    c.SwaggerDoc("v1", new OpenApiInfo { Title = "My API", Description = "Docs for my API", Version = "v1" });
});
var app = builder.Build();

app.UseSwagger();

app.UseSwaggerUI(c =>
{
    c.SwaggerEndpoint("/swagger/v1/swagger.json", "My API V1");
});

// Define prediction route & handler
app.MapPost("/predict",
    async (PredictionEnginePool<MLModel.ModelInput, MLModel.ModelOutput> predictionEnginePool, HttpRequest request) =>
    {
        var file = request.Form.Files[0];
        var stream = new MemoryStream();
        file.CopyTo(stream);
        var input = new MLModel.ModelInput()
        {
            ImageSource = stream.ToArray(),
        };
        var result = predictionEnginePool.Predict(input);

        return result;
    })
    .Accepts<IFormFile>("multipart/form-data");

app.UseCors(opts => opts.AllowAnyOrigin());

// Run app
app.Run();
